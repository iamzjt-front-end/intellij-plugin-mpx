{
  "$schema": "../../../../plugins/JavaScriptLanguage/web-platform/web-types-gen/resources/web-types.json",
  "framework": "mpx",
  "name": "mpx",
  "version": "3.0.0",
  "js-types-syntax": "typescript",
  "description-markup": "markdown",
  "default-icon": "icons/vue.svg",
  "framework-config": {
    "enable-when": {
      "node-packages": [
      ],
      "file-extensions": [
        "mpx"
      ],
      "ide-libraries": [
      ]
    }
  },
  "contributions": {
    "html": {
      "elements": [
        {
          "name": "Vue component",
          "pattern": {
            "items": "/html/vue-components"
          },
          "attributes": [
            {
              "name": "Component property",
              "pattern": {
                "or": [
                  {
                    "items": "props",
                    "priority": "highest"
                  },
                  {
                    "delegate": "vue-custom-prop",
                    "priority": "lowest"
                  }
                ]
              },
              "value": {
                "type": "of-match",
                "kind": "plain"
              },
              "vue-custom-prop": {
                "name": "Custom Vue component property",
                "pattern": "(?!wx:).*",
                "doc-hide-pattern": true,
                "attribute-value": {
                  "required": false
                }
              }
            }
          ]
        },
        {
          "name": "template",
          "extension": true,
          "attributes": [
            {
              "name": "scope",
              "deprecated": true,
              "value": {
                "kind": "expression",
                "parser": "vue:slot-scope"
              }
            }
          ]
        },
        {
          "name": "slot",
          "description": "`<slot>` serve as content distribution outlets in component templates. `<slot>` itself will be replaced.",
          "doc-url": "https://v3.vuejs.org/api/built-in-components.html#slot",
          "attributes": [
            {
              "name": "name",
              "description": "Used for named slot.",
              "value": {
                "type": "string"
              }
            }
          ]
        }
      ],
      "attributes": [
        {
          "name": "Mpx directive",
          "description": "Directives are special attributes with the `wx:` prefix. Directive attribute values are expected to be a single JavaScript expression (with the exception of `wx:for` and `wx:if`). A directive's job is to reactively apply side effects to the DOM when the value of its expression changes.",
          "doc-url": "https://mpxjs.cn/api/directives.html",
          "virtual": true,
          "value": {
            "kind": "expression",
            "parser": "vue:expression",
            "type": "any",
            "required": false
          },
          "pattern": {
            "items": "/html/vue-directives",
            "template": [
              "wx:",
              "#item:Vue directive"
            ]
          }
        },
        {
          "name": "slot",
          "deprecated": true
        },
        {
          "name": "is",
          "priority": "low"
        },
        {
          "name": "key",
          "priority": "low"
        },
        {
          "name": "style",
          "priority": "low"
        },
        {
          "name": "class",
          "priority": "low"
        },
        {
          "name": "bindtap",
          "priority": "low"
        },
        {
          "name": "bindtouchstart",
          "priority": "low"
        },
        {
          "name": "bindtouchmove",
          "priority": "low"
        },
        {
          "name": "bindtouchcancel",
          "priority": "low"
        },
        {
          "name": "bindtouchend",
          "priority": "low"
        },
        {
          "name": "bindlongpress",
          "priority": "low"
        },
        {
          "name": "bindlongtap",
          "priority": "low"
        },
        {
          "name": "bindtransitionend",
          "priority": "low"
        },{
          "name": "bindanimationstart",
          "priority": "low"
        },
        {
          "name": "bindanimationiteration",
          "priority": "low"
        },
        {
          "name": "bindanimationend",
          "priority": "low"
        },
        {
          "name": "bindtouchforcechange",
          "priority": "low"
        },
        {
          "name": "catchtap",
          "priority": "low"
        },
        {
          "name": "catchtouchstart",
          "priority": "low"
        },
        {
          "name": "catchtouchmove",
          "priority": "low"
        },
        {
          "name": "catchtouchcancel",
          "priority": "low"
        },
        {
          "name": "catchtouchend",
          "priority": "low"
        },
        {
          "name": "catchlongpress",
          "priority": "low"
        },
        {
          "name": "catchlongtap",
          "priority": "low"
        },
        {
          "name": "catchtransitionend",
          "priority": "low"
        },
        {
          "name": "catchanimationstart",
          "priority": "low"
        },
        {
          "name": "catchanimationiteration",
          "priority": "low"
        },
        {
          "name": "catchanimationend",
          "priority": "low"
        },
        {
          "name": "catchtouchforcechange",
          "priority": "low"
        }
      ],
      "vue-file-top-elements": [
        {
          "name": "style",
          "priority": "high",
          "description": "The top-level `<style>` element serves as a container for the component styles.",
          "attributes": [
            {
              "name": "lang"
            },
            {
              "name": "src"
            },
            {
              "name": "module",
              "value": {
                "required": false
              }
            },
            {
              "name": "scoped",
              "value": {
                "kind": "no-value"
              }
            }
          ]
        },
        {
          "name": "script",
          "priority": "high",
          "description": "The top-level `<script>` element serves as a container for the component code.",
          "attributes": [
            {
              "name": "lang"
            },
            {
              "name": "id"
            },
            {
              "name": "src"
            },
            {
              "name": "setup",
              "value": {
                "kind": "no-value"
              }
            }
          ]
        },
        {
          "name": "template",
          "priority": "high",
          "description": "The top-level `<template>` element serves as a container for the component template contents.",
          "attributes": [
            {
              "name": "lang"
            },
            {
              "name": "src"
            },
            {
              "name": "functional",
              "value": {
                "kind": "no-value"
              }
            }
          ]
        }
      ],
      "vue-components": [
        {
          "name": "Component",
          "doc-url": "https://v3.vuejs.org/api/built-in-components.html#component",
          "description": "A “meta component” for rendering dynamic components. The actual component to render is determined by the `is` prop.",
          "props": [
            {
              "name": "is",
              "description": "An HTML tag name, a Component name or Component class reference.",
              "type": [
                "string",
                "ComponentDefinition",
                "ComponentConstructor"
              ]
            }
          ]
        },
        {
          "name": "image",
          "description": "媒体组件",
          "doc-url": "https://developers.weixin.qq.com/miniprogram/dev/component/image.html",
          "props": [
            {
              "name": "mode",
              "description": "图片裁剪、缩放的模式",
              "attribute-value": {
                "type": "enum",
                "default": "scaleToFill"
              },
              "values": [
                {
                  "name": "scaleToFill",
                  "description": "缩放模式，不保持纵横比缩放图片，使图片的宽高完全拉伸至填满 image 元素"
                },
                {
                  "name": "aspectFit",
                  "description": "缩放模式，保持纵横比缩放图片，使图片的长边能完全显示出来。也就是说，可以完整地将图片显示出来"
                },
                {
                  "name": "aspectFill",
                  "description": "缩放模式，保持纵横比缩放图片，只保证图片的短边能完全显示出来。也就是说，图片通常只在水平或垂直方向是完整的，另一个方向将会发生截取"
                },
                {
                  "name": "widthFix",
                  "description": "缩放模式，宽度不变，高度自动变化，保持原图宽高比不变"
                },
                {
                  "name": "heightFix",
                  "description": "缩放模式，高度不变，宽度自动变化，保持原图宽高比不变，2。10。3"
                },
                {
                  "name": "top",
                  "description": "裁剪模式，不缩放图片，只显示图片的顶部区域"
                },
                {
                  "name": "bottom",
                  "description": "裁剪模式，不缩放图片，只显示图片的底部区域"
                },
                {
                  "name": "center",
                  "description": "裁剪模式，不缩放图片，只显示图片的中间区域"
                },
                {
                  "name": "right",
                  "description": "裁剪模式，不缩放图片，只显示图片的左边区域"
                },
                {
                  "name": "left",
                  "description": "裁剪模式，不缩放图片，只显示图片的右边区域"
                },
                {
                  "name": "top left",
                  "description": "裁剪模式，不缩放图片，只显示图片的左上边区域"
                },
                {
                  "name": "top right",
                  "description": "裁剪模式，不缩放图片，只显示图片的右上边区域"
                },
                {
                  "name": "bottom left",
                  "description": "裁剪模式，不缩放图片，只显示图片的左下边区域"
                },
                {
                  "name": "bottom right",
                  "description": "裁剪模式，不缩放图片，只显示图片的右下边区域"
                }
              ]
            }
          ]
        }
      ],
      "vue-directives": [
        {
          "name": "style",
          "description": "直接绑定到一个样式对象通常更好，这会让模板更清晰",
          "doc-url": "https://mpxjs.cn/api/directives.html#wx-style",
          "attribute-value": {
            "type": "string",
            "required": true
          }
        },
        {
          "name": "ref",
          "description": "获取 WXML 节点信息的对象",
          "doc-url": "https://mpxjs.cn/api/directives.html#wx-ref",
          "attribute-value": {
            "type": "string",
            "required": true
          }
        },
        {
          "name": "show",
          "description": "Toggles the element’s `display` CSS property based on the truthy-ness of the expression value.\n\nThis directive triggers transitions when its condition changes.",
          "doc-url": "https://mpxjs.cn/api/directives.html#wx-show",
          "attribute-value": {
            "required": true
          }
        },
        {
          "name": "if",
          "description": "Conditionally render the element based on the truthy-ness of the expression value. The element and its contained directives / components are destroyed and re-constructed during toggles. If the element is a `<template>` element, its content will be extracted as the conditional block.\n\nThis directive triggers transitions when its condition changes.",
          "doc-url": "https://mpxjs.cn/api/directives.html#wx-if",
          "attribute-value": {
            "required": true
          }
        },
        {
          "name": "else",
          "description": "Denote the “else block” for `wx:if` or a `wx:if/wx:elif` chain.",
          "doc-url": "https://mpxjs.cn/api/directives.html#wx-else",
          "attribute-value": {
            "kind": "no-value"
          }
        },
        {
          "name": "elif",
          "description": "Denote the “else if block” for `wx:if`. Can be chained.",
          "doc-url": "https://mpxjs.cn/api/directives.html#wx-elif",
          "attribute-value": {
            "required": true
          }
        },
        {
          "name": "for",
          "description": "Render the element or template block multiple times based on the source data. The directive’s value must use the special syntax `alias in expression` to provide an alias for the current element being iterated on. Alternatively, you can also specify an alias for the index (or the key if used on an Object). The default behavior of `v-for` will try to patch the elements in-place without moving them. To force it to reorder elements, you need to provide an ordering hint with the `key` special attribute.",
          "doc-url": "https://mpxjs.cn/api/directives.html#wx-for",
          "attribute-value": {
            "parser": "vue:for",
            "type": "void",
            "required": true
          }
        },
        {
          "name": "on",
          "description": "Attaches an event listener to the element. The event type is denoted by the argument. The expression can be a method name, an inline statement, or omitted if there are modifiers present.\n\nWhen used on a normal element, it listens to *native DOM events* only. When used on a custom element component, it listens to *custom events* emitted on that child component.\n\nWhen listening to native DOM events, the method receives the native event as the only argument. If using inline statement, the statement has access to the special `$event` property: `v-on:click=\"handle('ok', $event)\"`.\n\n`v-on` also supports binding to an object of event/listener pairs without an argument. Note when using the object syntax, it does not support any modifiers.",
          "doc-url": "https://v3.vuejs.org/api/directives.html#v-on",
          "attribute-value": {
            "parser": "vue:on",
            "type": "void",
            "required": true
          },
          "argument": {
            "name": "event name",
            "description": "Optional event name",
            "pattern": {
              "or": [
                {
                  "items": "/html/events",
                  "priority": "normal"
                },
                {
                  "template": [
                    {
                      "regex": "(?!\\.).*"
                    }
                  ],
                  "priority": "lowest"
                }
              ]
            }
          },
          "modifiers": [
            {
              "name": "stop",
              "description": "Call `event.stopPropagation()`.",
              "attribute-value": {
                "required": false
              }
            },
            {
              "name": "prevent",
              "description": "Call `event.preventDefault()`.",
              "attribute-value": {
                "required": false
              }
            },
            {
              "name": "capture",
              "description": "Add event listener in capture mode."
            },
            {
              "name": "self",
              "description": "Only trigger handler if event was dispatched from this element."
            },
            {
              "name": "once",
              "description": "Trigger handler at most once."
            },
            {
              "name": "passive",
              "description": "attaches a DOM event with `{ passive: true }`."
            }
          ],
          "events": [
            {
              "name": "Mouse button event modifiers",
              "extension": true,
              "pattern": {
                "or": [
                  "click",
                  "dblclick",
                  "mousedown",
                  "mouseup"
                ]
              },
              "modifiers": [
                {
                  "name": "left",
                  "description": "Only trigger handler for left button mouse events."
                },
                {
                  "name": "right",
                  "description": "Only trigger handler for right button mouse events."
                },
                {
                  "name": "middle",
                  "description": "Only trigger handler for middle button mouse events."
                }
              ]
            },
            {
              "name": "Key event modifiers",
              "extension": true,
              "pattern": {
                "or": [
                  "keydown",
                  "keypress",
                  "keyup"
                ]
              },
              "modifiers": [
                {
                  "name": "Key alias",
                  "pattern": {
                    "or": [
                      "enter",
                      "tab",
                      "delete",
                      "esc",
                      "space",
                      "up",
                      "down",
                      "left",
                      "right"
                    ]
                  }
                }
              ]
            },
            {
              "name": "System event modifiers",
              "extension": true,
              "pattern": {
                "or": [
                  "keydown",
                  "keypress",
                  "keyup",
                  "click",
                  "contextmenu",
                  "dblclick",
                  "mousedown",
                  "mouseenter",
                  "mouseleave",
                  "mousemove",
                  "mouseout",
                  "mouseover",
                  "mouseup",
                  "show",
                  "drag",
                  "dragend",
                  "dragenter",
                  "dragleave",
                  "dragover",
                  "dragstart",
                  "drop"
                ]
              },
              "modifiers": [
                {
                  "name": "System modifier key",
                  "description": "Triggers mouse or keyboard event listeners only when the modifier key is pressed.",
                  "pattern": {
                    "or": [
                      "ctrl",
                      "alt",
                      "shift",
                      "meta"
                    ]
                  }
                },
                {
                  "name": "exact",
                  "description": "Allows control of the exact combination of system modifiers needed to trigger an event."
                }
              ]
            }
          ]
        },
        {
          "name": "model",
          "description": "Create a two-way binding on a form input element or a component. For detailed usage and other notes, see the Guide section.",
          "doc-url": "https://v3.vuejs.org/api/directives.html#v-model",
          "attribute-value": {
            "type": "any",
            "required": true
          },
          "argument": {
            "name": "v-model prop/event pair to bind",
            "pattern": {
              "items": {
                "path": "attributes",
                "filter": "match-with-target-list",
                "target-list": "/html/events",
                "prefix": "update:"
              }
            }
          },
          "modifiers": [
            {
              "name": "lazy",
              "description": "Listen to `change` events instead of `input`"
            },
            {
              "name": "number",
              "description": "Cast valid input string to numbers"
            },
            {
              "name": "trim",
              "description": "Trim input"
            },
            {
              "name": "custom",
              "pattern": {
                "items": [
                  "vue-model-modifiers"
                ]
              }
            }
          ]
        },
        {
          "name": "slot",
          "description": "Denote named slots or slots that expect to receive props.",
          "doc-url": "https://v3.vuejs.org/api/directives.html#v-slot",
          "attribute-value": {
            "parser": "vue:slot",
            "type": "void"
          },
          "argument": {
            "name": "Slot name",
            "description": "Slot name (optional, defaults to `default`)",
            "pattern": {
              "items": "vue-available-slots"
            }
          }
        }
      ]
    }
  }
}
